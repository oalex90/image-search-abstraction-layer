 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongo = require('mongodb').MongoClient; //used to connect to database
var request = require('request'); //used to make api call and recieve JSON response

var dbUrl = "mongodb://oalex90:darumo970@ds135552.mlab.com:35552/api-projects"

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/') //home / instruction page
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get('/imagesearch/*', function(req, res){
  //remove "/imagesearch/ from url string, take query out, and decode
  var searchTerm = decodeURIComponent(req.url.substr(13).split('?')[0]); 
  var offset = req.query.offset; //extract offset value, if any, from query
  
  var imageAPIURL = "https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/" + searchTerm; //api url
  if(offset){ //if offset exists, add to api call
    imageAPIURL += "?offset=" + offset;
  }
  
  request(imageAPIURL, function (err, response, body) { //make call to api and receive JSON response
    if (err || response.statusCode !== 200) { //notify if error occurs
      return res.sendStatus(500);
    }
    var results = JSON.parse(body); //convert output to JSON object
    var out = []; //array to store result objects to output
    
    for (var i =0; i<results.length; i++){ //for each obj in arr, extract props we need into new objects
      var curResult = results[i];
      var newResult = {
        imageURL: curResult.url,
        altText: curResult.snippet,
        pageURL: curResult.context
      };
      out.push(newResult);
    }
    res.send(out); //output new results object array
  });

  mongo.connect(dbUrl, function(err, db){ //connect mongo database
    if (err) throw err;
    
    var collection = db.collection("imageSearch"); //find the collection for this project
    collection.insert({term:searchTerm, when:new Date(Date.now()).toISOString()}); //insert term and current date in db
    db.close(); //close db connection after accesssing
    }); 
});

app.get('/latest', function(req, res){ //return 10 latest searches
  mongo.connect(dbUrl, function(err, db){
    if (err) throw err;
    db.collection("imageSearch").find({},{_id:0}).toArray(function(err,documents){ //get directory
      var results = documents.reverse().slice(0,10); //get 10 most recent entries
      db.close();
      res.send(results);
    });
  }); 
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
    console.log('Node.js listening ...');
  });






